# 常用匹配规则

# \d 匹配一个数字
# \w 匹配一个字母或数字
# . 可以匹配任意字符
# * 表示任意个字符(包括0个)
# + 表示至少一个字符
# ? 表示0个或1个字符
# {n} 表示n个字符
# {n,m} 表示n-m个字符
# \s 可以匹配一个空格
# \ 单独表示转义 \- 表示 '-'符号

#进阶

# [] 表示范围
# [0-9a-zA-Z\_] 可以匹配一个数字, 字母或者下划线
# [0-9a-zA-Z\_]+ 可以匹配至少由一个数字,字幕或者下划线组成的字符串
# [a-zA-Z\_][0-9a-zA-Z\_]* 可以匹配由字母或下划线开头,后接任意个由一个数字,字母或者下划线组成的字符串, 也就是python的合法变量
# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19} 可以匹配由字母或者下划线开头,后接0-19数字,字母或者下划线组成的字符串,限制了字符串的长度

# A|B 可以匹配A或者B  (p|P)ython 可以匹配python 或 Python
# ^ 表示行的开头, ^\d 表示必须以数字开头
# $ 表示行的结束, \d$ 表示必须以数字结束



#re模块


#python中提供正则的模块
#由于python本身也用\转义, 所以要特别注意, 但是推荐是用r前缀
import re
print(re.match(r'\d{3}\-\d{3,8}', '010-12345'))

print(re.match(r'\d{3}\-\d{3,8}', '010 12345'))

#如果匹配成功, 返回一个match对象,否则返回None

#常见使用
test = '用户输入字符串'
if re.match(r'正则表达式', test):
    print('OK')
else:
    print('failed')




#切分字符串
#使用正则切分字符串更加灵活


print('a b  c'.split(' '))

print(re.split(r'\s+', 'a b    c'))

print(re.split(r'[\s\,\;]+', 'a, b;;    c'))


#分组
#提取子串的强大功能 ()表示就是要提取的分组
# ^(\d{3})-(\d{3,8})$ 定义了两个组,可以直接从匹配的字符串中提取出区号和本地号码

m = re.match(r'^(\d{3})\-(\d{3,8})\-(\d{3,8})$', '010-13245-111')
print(m)
print(m.group(0))
print(m.group(1))
print(m.group(2))
print(m.group(3))

#group(0) 永远是原始字符串


#贪婪匹配
#正则默认是贪婪匹配, 也就是匹配尽可能多的字符
#所以要在后面加个?可以让\d+采用非贪婪匹配



